package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.CompilerError.CompilerErrorType;
import java.util.*;


parser code {:
	
	boolean fatalErrorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	
	public List<CompilerError> synErrors = new ArrayList<>();
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		done_parsing();
		fatalErrorDetected = true;
		report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
    public List<CompilerError> getSynErrors(){
    	return synErrors;
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, LSQR, RSQR, SEMI;
terminal LPAREN, RPAREN, CONST, COMMA, PRINT;
terminal RETURN, VOID, NEW, CONTINUE, WHILE ;
terminal PLUS, MINUS, ASTK, DIV, MOD, AND, OR;
terminal INC, DEC, EQUAL, GT, GET, LT, LET, EQEQ, NEQ;
terminal READ, BREAK, DO, QSTMK, COLON, IF, ELSE;
terminal EXTENDS, DOT, SWITCH, ENUM, CLASS, CASE, DEFAULT, YIELD ;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal Character CHAR ;
terminal String BOOL ;

nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormalParams FormalParams ;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormalParamDeclComma FormalParamDeclComma;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal OneActualParam OneActualParam ; 
nonterminal StatementList StatementList;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal Statement Statement ;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop ;
nonterminal GlobDeclList GlobDeclList;
nonterminal Decl Decl;
nonterminal CnstDecl CnstDecl;
nonterminal CnstAsgnList CnstAsgnList ; 
nonterminal VarAsgnList VarAsgnList;
nonterminal VarAsgnOne VarAsgnOne;
nonterminal MethodType MethodType ;
nonterminal ActualParsStart ActualParsStart;
nonterminal CnstAsgn CnstAsgn;
nonterminal DoPartOfWhile DoPartOfWhile ;
nonterminal Case Case;
nonterminal CaseList CaseList;
nonterminal CaseBegin CaseBegin;
nonterminal DefaultBegin DefaultBegin;
nonterminal SwitchBegin SwitchBegin;
nonterminal YieldBegin YieldBegin;
nonterminal TerColon TerColon;
nonterminal TerQstmk TerQstmk;
nonterminal IfPart IfPart;
nonterminal ElsePart ElsePart;
nonterminal Minus Minus ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj FuncDesig, Program, ProgName, Designator, MethodDecl, MethodTypeName ; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, Type, Term, SumExpr, Expr, Expr1, Factor, VarDeclList ; 

precedence left ELSE ;

Program ::= (AstProgram) PROG ProgName:progName GlobDeclList:decls LBRACE MethodDeclList:methods RBRACE {: RESULT=new AstProgram(progName, decls, methods); RESULT.setLine(progNameleft); :} ;

ProgName ::= (AstProgName) IDENT:prog {: RESULT=new AstProgName(prog); RESULT.setLine(progleft); :} ;

GlobDeclList ::= (AstGlobDeclL) GlobDeclList:G1 Decl:D2 {: RESULT=new AstGlobDeclL(G1, D2); RESULT.setLine(G1left); :}
			|
			(AstNoGlobDecl) {: RESULT=new AstNoGlobDecl(); :} /* epsilon */
			;

Decl ::= (AstGlobCnstDecl) CnstDecl:C1 {: RESULT=new AstGlobCnstDecl(C1); RESULT.setLine(C1left); :}
		|
		(AstGlobVarDecl) VarDecl:V1 {: RESULT=new AstGlobVarDecl(V1); RESULT.setLine(V1left); :}
		;
		
CnstDecl ::= (AstCnstDecl) CONST Type:T1 CnstAsgnList:C2 {: RESULT=new AstCnstDecl(T1, C2); RESULT.setLine(T1left); :};

CnstAsgnList ::= (AstCnstAsgnL) CnstAsgn:C1 COMMA CnstAsgnList:C2 {: RESULT=new AstCnstAsgnL(C1, C2); RESULT.setLine(C1left); :}
				|
				(AstCnstAsgnOne) CnstAsgn:C1 SEMI {: RESULT=new AstCnstAsgnOne(C1); RESULT.setLine(C1left); :}
				|
				(AstCnstAsgnCommaErr) error:e COMMA
				{: 	parser.report_error("Syntax error in line " + eleft + " global constant error" + ". recovery up to ','", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad global constant declaration error. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
				:} {: RESULT=new AstCnstAsgnCommaErr(); :}
				|
				(AstCnstAsgnSemiErr) error:e SEMI
				{: 	parser.report_error("Syntax error in line " + eleft + " global constant error" + ". recovery up to ';'", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad global constant declaration error. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
				:} {: RESULT=new AstCnstAsgnSemiErr(); :}
				;

CnstAsgn ::= (AstCnstAsgnInt) IDENT:cnstName EQUAL	NUMBER:value {: RESULT=new AstCnstAsgnInt(cnstName, value); RESULT.setLine(cnstNameleft); :} 
			|
			(AstCnstAsgnChar) IDENT:cnstName EQUAL	CHAR:value {: RESULT=new AstCnstAsgnChar(cnstName, value); RESULT.setLine(cnstNameleft); :} 
			|
			(AstCnstAsgnBool) IDENT:cnstName EQUAL	BOOL:value {: RESULT=new AstCnstAsgnBool(cnstName, value); RESULT.setLine(cnstNameleft); :} 
			;

VarDeclList ::= (AstVarDeclL) VarDeclList:V1 VarDecl:V2 {: RESULT=new AstVarDeclL(V1, V2); RESULT.setLine(V1left); :}
				|
				(AstNoVarDecl) {: RESULT=new AstNoVarDecl(); :} /* epsilon */
				;

VarDecl ::= (AstVarDecl) Type:varType VarAsgnList:V1 {: RESULT=new AstVarDecl(varType, V1); RESULT.setLine(varTypeleft); :} ;

VarAsgnList ::= (AstVarAsgnL) VarAsgnOne:V1 COMMA VarAsgnList:V2 {: RESULT=new AstVarAsgnL(V1, V2); RESULT.setLine(V1left); :}
					|
					(AstVarAsgnSemi) VarAsgnOne:V1 SEMI {: RESULT=new AstVarAsgnSemi(V1); RESULT.setLine(V1left); :}
					|
					(AstVarAsgnCommaErr) error:e COMMA
					{: 	parser.report_error("Syntax error in line " + eleft + " global variable error" + ". recovery up to ','", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad global variable declaration error. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
					:} {: RESULT=new AstVarAsgnCommaErr(); :}
					|
					(AstVarAsgnSemiErr) error:e SEMI
					{: 	parser.report_error("Syntax error in line " + eleft + " global variable error" + ". recovery up to ';'", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad global variable declaration error. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
					:} {: RESULT=new AstVarAsgnSemiErr(); :}
					;
				
VarAsgnOne ::= (AstVarAsgn) IDENT:varName {: RESULT=new AstVarAsgn(varName); RESULT.setLine(varNameleft); :}
				|
				(AstVarArrAsgn) IDENT:varName LSQR RSQR {: RESULT=new AstVarArrAsgn(varName); RESULT.setLine(varNameleft); :}
					;

Type ::= (AstType) IDENT:typeName {: RESULT=new AstType(typeName); RESULT.setLine(typeNameleft); :} ;

MethodDeclList ::= (AstMethDeclL) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new AstMethDeclL(M1, M2); RESULT.setLine(M1left); :}
					|
					(AstNoMethodDecl) {: RESULT=new AstNoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (AstMethDecl) MethodTypeName:M1
			   FormalParams:F2 VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new AstMethDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= (AstMethTypeName) Type:retType IDENT:methName {: RESULT=new AstMethTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
					|
					(AstMethVoidName) VOID IDENT:methName {: RESULT=new AstMethVoidName(methName); RESULT.setLine(methNameleft); :}
					;

FormalParams ::= (AstFormalParams) LPAREN FormalParamList:F1 {: RESULT=new AstFormalParams(F1); RESULT.setLine(F1left); :} 
					|
					(AstNoFormalParams) LPAREN RPAREN {: RESULT=new AstNoFormalParams(); :}/* epsilon */
					;

FormalParamList ::= (AstFormalParamL) FormalParamDeclComma:F1 FormalParamList:F2 {: RESULT=new AstFormalParamL(F1, F2); RESULT.setLine(F1left); :}
					|
					(AstFormalParamErr) error:e RPAREN
					{: 	parser.report_error("Syntax error in line " + eleft + " formal params bad" + ". recovery up to ')'", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad formal parameter. Recovery up to ')'", CompilerErrorType.SYNTAX_ERROR));
					:} {: RESULT=new AstFormalParamErr(); :}
					|
					(AstFormalParamOne) FormalParamDecl:F1 RPAREN {: RESULT=new AstFormalParamOne(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (AstFormalParamDecl) Type:T1 IDENT:paramName {: RESULT=new AstFormalParamDecl(T1, paramName); RESULT.setLine(T1left); :}
					|
					(AstFormalParamArrDecl) Type:T1 IDENT:paramName LSQR RSQR {: RESULT=new AstFormalParamArrDecl(T1, paramName); RESULT.setLine(T1left); :}
					;
					
FormalParamDeclComma ::= (AstFormalParamDeclComma) FormalParamDecl:F1 COMMA {: RESULT=new AstFormalParamDeclComma(F1); RESULT.setLine(F1left); :}
						|
						(AstFormalParamListErr) error:e
						{: 	parser.report_error("Syntax error in line " + eleft + " formal params bad" + ". recovery up to ','", null); 
							parser.synErrors.add(new CompilerError(eleft, "Bad formal parameter. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
						:} {: RESULT=new AstFormalParamListErr(); :}
						;
					
StatementList ::= (AstStatementL) StatementList:S1 Statement:S2 {: RESULT=new AstStatementL(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (AstNoStmt) {: RESULT=new AstNoStmt(); :} /* epsilon */
				  ;
				  
DesignatorStatement ::= (AstEqualStmt) Designator:D1 EQUAL Expr:E2 {: RESULT=new AstEqualStmt(D1, E2); RESULT.setLine(D1left); :} 
					|
					(AstIncStmt) Designator:D1 INC {: RESULT=new AstIncStmt(D1); RESULT.setLine(D1left); :}
					|
					(AstDecStmt) Designator:D1 DEC {: RESULT=new AstDecStmt(D1); RESULT.setLine(D1left); :}
					|
					(AstFuncCallStmt) FuncDesig:F1 LPAREN ActualPars:A2 RPAREN {: RESULT=new AstFuncCallStmt(F1, A2); RESULT.setLine(F1left); :}
					;

Statement ::= (AstDesigStmt) DesignatorStatement:des SEMI {: RESULT=new AstDesigStmt(des); RESULT.setLine(desleft); :} 
			  |
			  (AstErrAssignment) Designator:D1 EQUAL error:e SEMI
			  {: 	parser.report_error("Syntax error in line " + eleft + " assignment error " + ". recovery up to ';'", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad assignment statement. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
			  :} {: RESULT=new AstErrAssignment(D1); RESULT.setLine(D1left); :}
			  |
			  (AstPrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new AstPrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
			  (AstPrintStmtParam) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new AstPrintStmtParam(E1, N2); RESULT.setLine(E1left); :} 
			  |
			  (AstReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new AstReadStmt(D1); RESULT.setLine(D1left); :} 
			  |
			  (AstBreakStmt) BREAK SEMI {: RESULT=new AstBreakStmt(); :}
			  | 
			  (AstContinueStmt) CONTINUE SEMI {: RESULT=new AstContinueStmt(); :}
			  | 
			  (AstReturnExpr) RETURN Expr:t SEMI {: RESULT=new AstReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (AstReturnNoExpr) RETURN SEMI {: RESULT=new AstReturnNoExpr(); :}
			  | 
			  (AstYield) YieldBegin:Y1 Expr:E2 SEMI {: RESULT=new AstYield(Y1, E2); RESULT.setLine(Y1left); :}
			  | 
			  (AstUnmatchedIf) IfPart:I1 Statement:S2 {: RESULT=new AstUnmatchedIf(I1, S2); RESULT.setLine(I1left); :}
			  |
			  (AstMatchedIf) IfPart:I1 Statement:S2 ElsePart:E3 Statement:S4 {: RESULT=new AstMatchedIf(I1, S2, E3, S4); RESULT.setLine(I1left); :}
			  |
			  (AstDoWhile) DoPartOfWhile:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new AstDoWhile(D1, S2, C3); RESULT.setLine(D1left); :}
			  |
			  (AstStmtL) LBRACE StatementList:S1 RBRACE {: RESULT=new AstStmtL(S1); RESULT.setLine(S1left); :}
			  ;
			  
IfPart ::= (AstIfPart) IF LPAREN Condition:C1 RPAREN {: RESULT=new AstIfPart(C1); RESULT.setLine(C1left); :} 
			|
			(AstIfPartErr) IF LPAREN error:e RPAREN
			{: 	parser.report_error("Syntax error in line " + eleft + " condition in if is bad " + ". recovery up to ')'", null); 
				parser.synErrors.add(new CompilerError(eleft, "Bad if condition. Recovery up to ')'", CompilerErrorType.SYNTAX_ERROR));
			:} {: RESULT=new AstIfPartErr(); :}
;

ElsePart ::= (AstElsePart) ELSE {: RESULT=new AstElsePart(); :} ;
			  
CaseList ::= (AstCaseList) Case:C1 CaseList:C2 {: RESULT=new AstCaseList(C1, C2); RESULT.setLine(C1left); :} 
			|
			(AstNoCase) {: RESULT=new AstNoCase(); :} /* epsilon */
			;
			
CaseBegin ::= (AstCaseBegin) CASE NUMBER:numConst {: RESULT=new AstCaseBegin(numConst); RESULT.setLine(numConstleft); :} ;

DefaultBegin ::= (AstDefaultBegin) DEFAULT {: RESULT=new AstDefaultBegin(); :} ;
			
Case ::= (AstCase) CaseBegin:C1 COLON StatementList:S2 {: RESULT=new AstCase(C1, S2); RESULT.setLine(C1left); :}
			|
			(AstDefault) DefaultBegin:D1 COLON StatementList:S2 {: RESULT=new AstDefault(D1, S2); RESULT.setLine(D1left); :} 
			;
			
YieldBegin ::= (AstYieldBegin) YIELD {: RESULT=new AstYieldBegin(); :} ;
			  
DoPartOfWhile ::= (AstDoPart) DO {: RESULT=new AstDoPart(); :} ;
			  
Expr ::= (AstTerExpr) Expr1:E1 TerQstmk:T2 Expr1:E3 TerColon:T4 Expr1:E5 {: RESULT=new AstTerExpr(E1, T2, E3, T4, E5); RESULT.setLine(E1left); :}
		|
		(AstNotTerExpr) Expr1:E1 {: RESULT=new AstNotTerExpr(E1); RESULT.setLine(E1left); :}
		;
		
TerQstmk ::= (AstTerQstmk) QSTMK {: RESULT=new AstTerQstmk(); :} ;

TerColon ::= (AstTerColon) COLON {: RESULT=new AstTerColon(); :} ;
		
Expr1 ::= (AstNegExpr) Minus:M1 SumExpr:S2 {: RESULT=new AstNegExpr(M1, S2); RESULT.setLine(M1left); :}
		|
		(AstPosExpr) SumExpr:S1 {: RESULT=new AstPosExpr(S1); RESULT.setLine(S1left); :}
	  	|
	  	(AstSwitchExpr) SwitchBegin:S1 LBRACE CaseList:C2 RBRACE {: RESULT=new AstSwitchExpr(S1, C2); RESULT.setLine(S1left); :}
		;
		
Minus ::= (AstMinus) MINUS {: RESULT=new AstMinus(); :} ;

SwitchBegin ::= (AstSwitchBegin) SWITCH LPAREN Expr:E1 RPAREN {: RESULT=new AstSwitchBegin(E1); RESULT.setLine(E1left); :} ;

SumExpr ::= (AstAddExpr) SumExpr:se Addop:A1 Term:t {: RESULT=new AstAddExpr(se, A1, t); RESULT.setLine(seleft); :}
		 |
		 (AstTermExpr) Term:t {: RESULT=new AstTermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (AstTermOne) Factor:t {: RESULT=new AstTermOne(t); RESULT.setLine(tleft); :} 
		|
		(AstTermL) Term:T1 Mulop:op Factor:t {: RESULT=new AstTermL(T1, op, t); RESULT.setLine(T1left); :}
;

Factor ::= (AstFactNum) NUMBER:N1 {: RESULT=new AstFactNum(N1); RESULT.setLine(N1left); :}
			|
			(AstFactChar) CHAR:C1 {: RESULT=new AstFactChar(C1); RESULT.setLine(C1left); :}
			|
			(AstFactBool) BOOL:B1 {: RESULT=new AstFactBool(B1); RESULT.setLine(B1left); :}
			|
			(AstBraceExpr) LPAREN Expr:e RPAREN {: RESULT=new AstBraceExpr(e); RESULT.setLine(eleft); :} 
			|
		   (AstDesigFact) Designator:d {: RESULT=new AstDesigFact(d); RESULT.setLine(dleft); :}
		    |
		   (AstFuncCallFact) FuncDesig:F1 LPAREN ActualPars:A2 RPAREN {: RESULT=new AstFuncCallFact(F1, A2); RESULT.setLine(F1left); :}
		    |
		   (AstNewArray) NEW Type:t LSQR Expr:e RSQR {: RESULT=new AstNewArray(t, e); RESULT.setLine(tleft); :}
		   ;

ActualPars ::= (AstActualParams) ActualParsStart:A1 ActualParamList:A2 {: RESULT=new AstActualParams(A1, A2); RESULT.setLine(A1left); :} 
				|
				(AstNoActualParams) {: RESULT=new AstNoActualParams(); :} /* epsilon */
			   ;
			   
FuncDesig ::= (AstFuncDesig) Designator:D1 {: RESULT=new AstFuncDesig(D1); RESULT.setLine(D1left); :} ;
			   
ActualParsStart ::= (AstStartActualParams) {: RESULT=new AstStartActualParams(); :} /* epsilon */ ;
			   
ActualParamList ::= (AstActualParamL) ActualParamList:A1 COMMA OneActualParam:O2 {: RESULT=new AstActualParamL(A1, O2); RESULT.setLine(A1left); :}
					|
					(AstActualParam) OneActualParam:O1 {: RESULT=new AstActualParam(O1); RESULT.setLine(O1left); :}
					;
					
OneActualParam ::= (AstOneActualParam) Expr:E1 {: RESULT=new AstOneActualParam(E1); RESULT.setLine(E1left); :} ;
					
Condition ::= (AstConditionOne) CondTerm:C1 {: RESULT=new AstConditionOne(C1); RESULT.setLine(C1left); :}
			|
			(AstConditionL) Condition:C1 OR CondTerm:C2 {: RESULT=new AstConditionL(C1, C2); RESULT.setLine(C1left); :}
			;

CondTerm ::= (AstCondTermOne) CondFact:C1 {: RESULT=new AstCondTermOne(C1); RESULT.setLine(C1left); :}
			|
			(AstCondTermL) CondTerm:C1 AND CondFact:C2 {: RESULT=new AstCondTermL(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= (AstCondFact) Expr:e1 Relop:R1 Expr:e2 {: RESULT=new AstCondFact(e1, R1, e2); RESULT.setLine(e1left); :}
			|
			(AstCondFactExpr) Expr:e {: RESULT=new AstCondFactExpr(e); RESULT.setLine(eleft); :}
			;

Designator ::= (AstDesig) IDENT:name {: RESULT=new AstDesig(name); RESULT.setLine(nameleft); :} 
				|
				(AstIndexDesig) Designator:D1 LSQR Expr:E2 RSQR {: RESULT=new AstIndexDesig(D1, E2); RESULT.setLine(D1left); :} 
;

Addop ::= (AstAddop) PLUS {: RESULT=new AstAddop(); :} 
		| 
		(AstSubop) MINUS {: RESULT=new AstSubop(); :}
;

Mulop ::= (AstMulop) ASTK {: RESULT=new AstMulop(); :} 
		| 
		(AstDivop) DIV {: RESULT=new AstDivop(); :} 
		| 
		(AstModop) MOD {: RESULT=new AstModop(); :}
;

Relop ::= (AstEqop) EQEQ {: RESULT=new AstEqop(); :}
			|
			(AstNeop) NEQ {: RESULT=new AstNeop(); :}
			|
			(AstGtop) GT {: RESULT=new AstGtop(); :}
			|
			(AstGetop) GET {: RESULT=new AstGetop(); :}
			|
			(AstLtop) LT {: RESULT=new AstLtop(); :}
			|
			(AstLetop) LET {: RESULT=new AstLetop(); :}
			;