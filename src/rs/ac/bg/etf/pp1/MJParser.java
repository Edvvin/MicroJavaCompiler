
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jun 14 19:43:29 CEST 2021
//----------------------------------------------------

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.CompilerError.CompilerErrorType;
import java.util.*;

/** CUP v0.10k generated parser.
  * @version Mon Jun 14 19:43:29 CEST 2021
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\050\010\000\002\002\004\000\002\051" +
    "\003\000\002\023\004\000\002\023\002\000\002\024\003" +
    "\000\002\024\003\000\002\025\005\000\002\026\005\000" +
    "\002\026\004\000\002\026\004\000\002\026\004\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\064" +
    "\004\000\002\064\002\000\002\004\004\000\002\027\005" +
    "\000\002\027\004\000\002\027\004\000\002\027\004\000" +
    "\002\030\003\000\002\030\005\000\002\056\003\000\002" +
    "\003\004\000\002\003\002\000\002\053\010\000\002\054" +
    "\004\000\002\054\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\007\004\000\002\007\006\000\002" +
    "\013\004\000\002\013\002\000\002\017\005\000\002\017" +
    "\004\000\002\017\004\000\002\017\006\000\002\016\004" +
    "\000\002\016\006\000\002\016\007\000\002\016\011\000" +
    "\002\016\007\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\016\004\000\002\016\005\000\002\016" +
    "\004\000\002\016\006\000\002\016\011\000\002\016\005" +
    "\000\002\045\006\000\002\045\006\000\002\046\003\000" +
    "\002\036\004\000\002\036\002\000\002\037\004\000\002" +
    "\040\003\000\002\035\005\000\002\035\005\000\002\042" +
    "\003\000\002\034\003\000\002\061\007\000\002\061\003" +
    "\000\002\044\003\000\002\043\003\000\002\062\004\000" +
    "\002\062\003\000\002\062\006\000\002\041\006\000\002" +
    "\060\005\000\002\060\003\000\002\057\003\000\002\057" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\005\000\002\063\003\000\002\063\006\000" +
    "\002\063\007\000\002\010\004\000\002\010\002\000\002" +
    "\047\003\000\002\032\002\000\002\011\005\000\002\011" +
    "\003\000\002\012\003\000\002\055\003\000\002\055\005" +
    "\000\002\015\003\000\002\015\005\000\002\014\005\000" +
    "\002\052\003\000\002\052\006\000\002\020\003\000\002" +
    "\020\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\004\005\001\002\000\004\002\324\001" +
    "\002\000\004\064\006\001\002\000\010\005\uffff\014\uffff" +
    "\064\uffff\001\002\000\010\005\ufffd\014\ufffd\064\ufffd\001" +
    "\002\000\010\005\012\014\011\064\015\001\002\000\004" +
    "\064\015\001\002\000\010\006\uffe7\020\uffe7\064\uffe7\001" +
    "\002\000\006\003\021\064\023\001\002\000\010\005\ufffb" +
    "\014\ufffb\064\ufffb\001\002\000\010\003\uffe9\007\uffe9\064" +
    "\uffe9\001\002\000\010\005\ufffe\014\ufffe\064\ufffe\001\002" +
    "\000\010\005\ufffc\014\ufffc\064\ufffc\001\002\000\006\011" +
    "\031\015\030\001\002\000\006\011\027\015\026\001\002" +
    "\000\010\005\ufff0\014\ufff0\064\ufff0\001\002\000\010\007" +
    "\024\011\uffeb\015\uffeb\001\002\000\004\010\025\001\002" +
    "\000\006\011\uffea\015\uffea\001\002\000\010\005\uffed\014" +
    "\uffed\064\uffed\001\002\000\010\005\uffec\014\uffec\064\uffec" +
    "\001\002\000\006\003\021\064\023\001\002\000\010\005" +
    "\uffee\014\uffee\064\uffee\001\002\000\010\005\uffef\014\uffef" +
    "\064\uffef\001\002\000\010\006\035\020\040\064\015\001" +
    "\002\000\004\064\305\001\002\000\004\002\001\001\002" +
    "\000\010\006\uffe8\020\uffe8\064\uffe8\001\002\000\004\012" +
    "\043\001\002\000\004\064\041\001\002\000\004\012\uffe4" +
    "\001\002\000\006\005\ufff1\064\ufff1\001\002\000\010\003" +
    "\046\013\044\064\015\001\002\000\006\005\uffe2\064\uffe2" +
    "\001\002\000\004\064\056\001\002\000\006\013\055\015" +
    "\054\001\002\000\006\005\uffe3\064\uffe3\001\002\000\006" +
    "\013\052\015\051\001\002\000\006\003\046\064\015\001" +
    "\002\000\006\005\uffde\064\uffde\001\002\000\006\005\uffe1" +
    "\064\uffe1\001\002\000\006\005\uffe0\064\uffe0\001\002\000" +
    "\006\005\uffdf\064\uffdf\001\002\000\010\007\057\013\uffdd" +
    "\015\uffdd\001\002\000\004\010\060\001\002\000\006\013" +
    "\uffdc\015\uffdc\001\002\000\006\005\062\064\015\001\002" +
    "\000\030\005\uffda\006\uffda\016\uffda\017\uffda\022\uffda\044" +
    "\uffda\045\uffda\046\uffda\051\uffda\062\uffda\064\uffda\001\002" +
    "\000\006\005\ufff2\064\ufff2\001\002\000\030\005\077\006" +
    "\071\016\103\017\074\022\067\044\066\045\102\046\100" +
    "\051\075\062\076\064\070\001\002\000\014\007\232\012" +
    "\uffa7\033\277\034\301\035\300\001\002\000\004\012\273" +
    "\001\002\000\004\011\272\001\002\000\062\007\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\024\uff9d\025\uff9d" +
    "\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\047\uff9d\050\uff9d\001\002\000\010\006\uffe6\020" +
    "\uffe6\064\uffe6\001\002\000\004\011\271\001\002\000\004" +
    "\012\266\001\002\000\024\011\264\012\122\021\127\025" +
    "\125\055\120\063\123\064\070\065\115\066\130\001\002" +
    "\000\004\012\256\001\002\000\022\012\uffbe\021\uffbe\025" +
    "\uffbe\055\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\001\002" +
    "\000\030\005\uffda\006\uffda\016\uffda\017\uffda\022\uffda\044" +
    "\uffda\045\uffda\046\uffda\051\uffda\062\uffda\064\uffda\001\002" +
    "\000\026\005\uffbd\016\uffbd\017\uffbd\022\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\051\uffbd\062\uffbd\064\uffbd\001\002\000\026" +
    "\005\077\016\103\017\074\022\067\044\066\045\102\046" +
    "\100\051\075\062\076\064\070\001\002\000\004\011\247" +
    "\001\002\000\004\012\237\001\002\000\022\012\122\021" +
    "\127\025\125\055\120\063\123\064\070\065\115\066\130" +
    "\001\002\000\034\005\uffdb\006\uffdb\016\uffdb\017\uffdb\022" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\051\uffdb\060\uffdb\061\uffdb" +
    "\062\uffdb\064\uffdb\001\002\000\026\005\077\016\103\017" +
    "\074\022\067\044\066\045\102\046\100\051\075\062\076" +
    "\064\070\001\002\000\004\023\110\001\002\000\004\012" +
    "\111\001\002\000\022\012\122\021\127\025\125\055\120" +
    "\063\123\064\070\065\115\066\130\001\002\000\054\007" +
    "\232\010\uffac\011\uffac\012\uffa7\013\uffac\015\uffac\024\uffac" +
    "\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\047\uffac" +
    "\050\uffac\001\002\000\050\010\uffb2\011\uffb2\013\uffb2\015" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\032\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\047\uffb2\050\uffb2\001\002\000\034\010\uffbb\011\uffbb" +
    "\013\uffbb\015\uffbb\031\uffbb\032\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\047\224\001\002\000\050" +
    "\010\uffaf\011\uffaf\013\uffaf\015\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\047\uffaf\050\uffaf\001" +
    "\002\000\004\012\213\001\002\000\010\013\uffa0\031\uffa0" +
    "\032\uffa0\001\002\000\004\012\210\001\002\000\016\036" +
    "\202\037\200\040\201\041\203\042\206\043\204\001\002" +
    "\000\022\012\122\021\127\025\125\055\120\063\123\064" +
    "\070\065\115\066\130\001\002\000\050\010\uffb0\011\uffb0" +
    "\013\uffb0\015\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\047\uffb0\050\uffb0\001\002\000\042\010" +
    "\uffb7\011\uffb7\013\uffb7\015\uffb7\024\172\025\173\031\uffb7" +
    "\032\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\047\uffb7\050\uffb7\001\002\000\016\012\122\021\127" +
    "\063\123\064\070\065\115\066\130\001\002\000\004\005" +
    "\153\001\002\000\004\064\015\001\002\000\050\010\uffae" +
    "\011\uffae\013\uffae\015\uffae\024\uffae\025\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\047\uffae\050\uffae\001\002\000" +
    "\010\013\uffa2\031\137\032\uffa2\001\002\000\050\010\uffb3" +
    "\011\uffb3\013\uffb3\015\uffb3\024\uffb3\025\uffb3\026\143\027" +
    "\144\030\142\031\uffb3\032\uffb3\036\uffb3\037\uffb3\040\uffb3" +
    "\041\uffb3\042\uffb3\043\uffb3\047\uffb3\050\uffb3\001\002\000" +
    "\006\013\134\032\135\001\002\000\004\011\141\001\002" +
    "\000\022\012\122\021\127\025\125\055\120\063\123\064" +
    "\070\065\115\066\130\001\002\000\010\013\uffa1\031\137" +
    "\032\uffa1\001\002\000\022\012\122\021\127\025\125\055" +
    "\120\063\123\064\070\065\115\066\130\001\002\000\010" +
    "\013\uff9f\031\uff9f\032\uff9f\001\002\000\040\005\uffc9\006" +
    "\uffc9\016\uffc9\017\uffc9\022\uffc9\023\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\051\uffc9\052\uffc9\060\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\001\002\000\016\012\uff97\021\uff97\063\uff97\064\uff97" +
    "\065\uff97\066\uff97\001\002\000\016\012\uff99\021\uff99\063" +
    "\uff99\064\uff99\065\uff99\066\uff99\001\002\000\016\012\uff98" +
    "\021\uff98\063\uff98\064\uff98\065\uff98\066\uff98\001\002\000" +
    "\016\012\122\021\127\063\123\064\070\065\115\066\130" +
    "\001\002\000\050\010\uffb1\011\uffb1\013\uffb1\015\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\047" +
    "\uffb1\050\uffb1\001\002\000\004\007\150\001\002\000\022" +
    "\012\122\021\127\025\125\055\120\063\123\064\070\065" +
    "\115\066\130\001\002\000\004\010\152\001\002\000\050" +
    "\010\uffaa\011\uffaa\013\uffaa\015\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\047\uffaa\050\uffaa\001" +
    "\002\000\010\006\uffc3\060\157\061\154\001\002\000\004" +
    "\050\uffc1\001\002\000\010\006\uffc3\060\157\061\154\001" +
    "\002\000\004\050\166\001\002\000\004\063\165\001\002" +
    "\000\004\050\163\001\002\000\004\006\162\001\002\000" +
    "\036\010\uffb6\011\uffb6\013\uffb6\015\uffb6\031\uffb6\032\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\047" +
    "\uffb6\050\uffb6\001\002\000\034\005\uffda\006\uffda\016\uffda" +
    "\017\uffda\022\uffda\044\uffda\045\uffda\046\uffda\051\uffda\060" +
    "\uffda\061\uffda\062\uffda\064\uffda\001\002\000\034\005\077" +
    "\006\uffbf\016\103\017\074\022\067\044\066\045\102\046" +
    "\100\051\075\060\uffbf\061\uffbf\062\076\064\070\001\002" +
    "\000\004\050\uffc2\001\002\000\034\005\uffda\006\uffda\016" +
    "\uffda\017\uffda\022\uffda\044\uffda\045\uffda\046\uffda\051\uffda" +
    "\060\uffda\061\uffda\062\uffda\064\uffda\001\002\000\034\005" +
    "\077\006\uffc0\016\103\017\074\022\067\044\066\045\102" +
    "\046\100\051\075\060\uffc0\061\uffc0\062\076\064\070\001" +
    "\002\000\004\006\uffc4\001\002\000\042\010\uffb8\011\uffb8" +
    "\013\uffb8\015\uffb8\024\172\025\173\031\uffb8\032\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\047\uffb8" +
    "\050\uffb8\001\002\000\016\012\uff9b\021\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\066\uff9b\001\002\000\016\012\uff9a\021\uff9a" +
    "\063\uff9a\064\uff9a\065\uff9a\066\uff9a\001\002\000\016\012" +
    "\122\021\127\063\123\064\070\065\115\066\130\001\002" +
    "\000\050\010\uffb4\011\uffb4\013\uffb4\015\uffb4\024\uffb4\025" +
    "\uffb4\026\143\027\144\030\142\031\uffb4\032\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\004\013\177\001\002\000\050\010\uffad" +
    "\011\uffad\013\uffad\015\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\047\uffad\050\uffad\001\002\000" +
    "\022\012\uff93\021\uff93\025\uff93\055\uff93\063\uff93\064\uff93" +
    "\065\uff93\066\uff93\001\002\000\022\012\uff92\021\uff92\025" +
    "\uff92\055\uff92\063\uff92\064\uff92\065\uff92\066\uff92\001\002" +
    "\000\022\012\uff94\021\uff94\025\uff94\055\uff94\063\uff94\064" +
    "\uff94\065\uff94\066\uff94\001\002\000\022\012\uff91\021\uff91" +
    "\025\uff91\055\uff91\063\uff91\064\uff91\065\uff91\066\uff91\001" +
    "\002\000\022\012\uff95\021\uff95\025\uff95\055\uff95\063\uff95" +
    "\064\uff95\065\uff95\066\uff95\001\002\000\022\012\122\021" +
    "\127\025\125\055\120\063\123\064\070\065\115\066\130" +
    "\001\002\000\022\012\uff96\021\uff96\025\uff96\055\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\001\002\000\010\013\uff9e" +
    "\031\uff9e\032\uff9e\001\002\000\022\012\122\021\127\025" +
    "\125\055\120\063\123\064\070\065\115\066\130\001\002" +
    "\000\004\013\212\001\002\000\004\005\uffb5\001\002\000" +
    "\024\012\uffa6\013\uffa8\021\uffa6\025\uffa6\055\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\001\002\000\004\013\223\001" +
    "\002\000\022\012\122\021\127\025\125\055\120\063\123" +
    "\064\070\065\115\066\130\001\002\000\006\013\uffa4\015" +
    "\uffa4\001\002\000\006\013\uffa9\015\221\001\002\000\006" +
    "\013\uffa3\015\uffa3\001\002\000\022\012\122\021\127\025" +
    "\125\055\120\063\123\064\070\065\115\066\130\001\002" +
    "\000\006\013\uffa5\015\uffa5\001\002\000\050\010\uffab\011" +
    "\uffab\013\uffab\015\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\047\uffab\050\uffab\001\002\000\022" +
    "\012\uffba\021\uffba\025\uffba\055\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\001\002\000\022\012\122\021\127\025\125" +
    "\055\120\063\123\064\070\065\115\066\130\001\002\000" +
    "\004\050\230\001\002\000\022\012\122\021\127\025\125" +
    "\055\120\063\123\064\070\065\115\066\130\001\002\000" +
    "\022\012\uffb9\021\uffb9\025\uffb9\055\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\001\002\000\032\010\uffbc\011\uffbc\013" +
    "\uffbc\015\uffbc\031\uffbc\032\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\001\002\000\022\012\122\021" +
    "\127\025\125\055\120\063\123\064\070\065\115\066\130" +
    "\001\002\000\004\010\234\001\002\000\062\007\uff9c\010" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\015\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\047\uff9c\050\uff9c\001\002\000\004\011\236\001" +
    "\002\000\040\005\uffcc\006\uffcc\016\uffcc\017\uffcc\022\uffcc" +
    "\023\uffcc\044\uffcc\045\uffcc\046\uffcc\051\uffcc\052\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\064\uffcc\001\002\000\022\012\122" +
    "\021\127\025\125\055\120\063\123\064\070\065\115\066" +
    "\130\001\002\000\006\013\242\015\241\001\002\000\004" +
    "\063\244\001\002\000\004\011\243\001\002\000\040\005" +
    "\uffd3\006\uffd3\016\uffd3\017\uffd3\022\uffd3\023\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\051\uffd3\052\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\064\uffd3\001\002\000\004\013\245\001\002\000\004" +
    "\011\246\001\002\000\040\005\uffd2\006\uffd2\016\uffd2\017" +
    "\uffd2\022\uffd2\023\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2" +
    "\052\uffd2\060\uffd2\061\uffd2\062\uffd2\064\uffd2\001\002\000" +
    "\040\005\uffd0\006\uffd0\016\uffd0\017\uffd0\022\uffd0\023\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\051\uffd0\052\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\064\uffd0\001\002\000\040\005\uffcb\006\uffcb" +
    "\016\uffcb\017\uffcb\022\uffcb\023\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\051\uffcb\052\252\060\uffcb\061\uffcb\062\uffcb\064\uffcb" +
    "\001\002\000\026\005\077\016\103\017\074\022\067\044" +
    "\066\045\102\046\100\051\075\062\076\064\070\001\002" +
    "\000\026\005\uffc5\016\uffc5\017\uffc5\022\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\051\uffc5\062\uffc5\064\uffc5\001\002\000\040" +
    "\005\uffca\006\uffca\016\uffca\017\uffca\022\uffca\023\uffca\044" +
    "\uffca\045\uffca\046\uffca\051\uffca\052\uffca\060\uffca\061\uffca" +
    "\062\uffca\064\uffca\001\002\000\030\005\077\006\255\016" +
    "\103\017\074\022\067\044\066\045\102\046\100\051\075" +
    "\062\076\064\070\001\002\000\040\005\uffc8\006\uffc8\016" +
    "\uffc8\017\uffc8\022\uffc8\023\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\051\uffc8\052\uffc8\060\uffc8\061\uffc8\062\uffc8\064\uffc8\001" +
    "\002\000\024\003\257\012\122\021\127\025\125\055\120" +
    "\063\123\064\070\065\115\066\130\001\002\000\004\013" +
    "\262\001\002\000\006\013\261\032\135\001\002\000\026" +
    "\005\uffc7\016\uffc7\017\uffc7\022\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\051\uffc7\062\uffc7\064\uffc7\001\002\000\026\005\uffc6" +
    "\016\uffc6\017\uffc6\022\uffc6\044\uffc6\045\uffc6\046\uffc6\051" +
    "\uffc6\062\uffc6\064\uffc6\001\002\000\004\011\265\001\002" +
    "\000\040\005\uffcd\006\uffcd\016\uffcd\017\uffcd\022\uffcd\023" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\051\uffcd\052\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\064\uffcd\001\002\000\040\005\uffce\006" +
    "\uffce\016\uffce\017\uffce\022\uffce\023\uffce\044\uffce\045\uffce" +
    "\046\uffce\051\uffce\052\uffce\060\uffce\061\uffce\062\uffce\064" +
    "\uffce\001\002\000\024\012\uffa6\013\uffa8\021\uffa6\025\uffa6" +
    "\055\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\001\002\000" +
    "\004\013\270\001\002\000\004\011\uffd6\001\002\000\040" +
    "\005\uffd5\006\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\064\uffd5\001\002\000\040\005\uffcf\006\uffcf\016" +
    "\uffcf\017\uffcf\022\uffcf\023\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\051\uffcf\052\uffcf\060\uffcf\061\uffcf\062\uffcf\064\uffcf\001" +
    "\002\000\004\064\070\001\002\000\006\007\232\013\275" +
    "\001\002\000\004\011\276\001\002\000\040\005\uffd1\006" +
    "\uffd1\016\uffd1\017\uffd1\022\uffd1\023\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\051\uffd1\052\uffd1\060\uffd1\061\uffd1\062\uffd1\064" +
    "\uffd1\001\002\000\004\011\uffd8\001\002\000\024\003\303" +
    "\012\122\021\127\025\125\055\120\063\123\064\070\065" +
    "\115\066\130\001\002\000\004\011\uffd7\001\002\000\004" +
    "\011\uffd9\001\002\000\004\011\304\001\002\000\040\005" +
    "\uffd4\006\uffd4\016\uffd4\017\uffd4\022\uffd4\023\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\051\uffd4\052\uffd4\060\uffd4\061\uffd4\062" +
    "\uffd4\064\uffd4\001\002\000\004\012\uffe5\001\002\000\006" +
    "\003\311\064\312\001\002\000\006\011\322\015\321\001" +
    "\002\000\010\005\ufffa\014\ufffa\064\ufffa\001\002\000\006" +
    "\011\320\015\317\001\002\000\004\035\313\001\002\000" +
    "\010\063\314\065\316\066\315\001\002\000\006\011\ufff5" +
    "\015\ufff5\001\002\000\006\011\ufff3\015\ufff3\001\002\000" +
    "\006\011\ufff4\015\ufff4\001\002\000\010\005\ufff7\014\ufff7" +
    "\064\ufff7\001\002\000\010\005\ufff6\014\ufff6\064\ufff6\001" +
    "\002\000\006\003\311\064\312\001\002\000\010\005\ufff8" +
    "\014\ufff8\064\ufff8\001\002\000\010\005\ufff9\014\ufff9\064" +
    "\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\004\050\003\001\001\000\002\001\001\000" +
    "\004\051\006\001\001\000\002\001\001\000\004\023\007" +
    "\001\001\000\012\004\013\024\015\025\016\056\012\001" +
    "\001\000\004\056\305\001\001\000\004\003\032\001\001" +
    "\000\006\027\021\030\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\031\030\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\053\035\054\036" +
    "\056\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\064\060\001\001\000\010\006" +
    "\046\007\047\056\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\052\007\047\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\062\056\012\001\001\000\004\013\063\001" +
    "\001\000\002\001\001\000\020\016\104\017\071\034\105" +
    "\042\103\045\100\047\072\052\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\041\125\047\115\052\111\057\131\060\123\061\262" +
    "\062\113\063\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\253\001\001\000\002\001\001\000\020" +
    "\016\247\017\071\034\105\042\103\045\100\047\072\052" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\041\125\047\115\052\111\057\131\060\123\061\234\062" +
    "\113\063\112\001\001\000\002\001\001\000\020\016\106" +
    "\017\071\034\105\042\103\045\100\047\072\052\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\116" +
    "\015\130\041\125\047\115\052\111\055\132\057\131\060" +
    "\123\061\120\062\113\063\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\204\001\001\000\022\041\125\047\115\052" +
    "\111\057\131\060\123\061\175\062\113\063\112\001\001" +
    "\000\002\001\001\000\004\020\173\001\001\000\014\047" +
    "\115\052\111\057\131\060\170\063\112\001\001\000\002" +
    "\001\001\000\004\056\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\116\015\135\041\125\047" +
    "\115\052\111\057\131\060\123\061\120\062\113\063\112" +
    "\001\001\000\002\001\001\000\024\014\137\041\125\047" +
    "\115\052\111\057\131\060\123\061\120\062\113\063\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\115" +
    "\052\111\063\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\041\125\047\115\052\111\057\131\060\123" +
    "\061\150\062\113\063\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\035\154\036\160\037\155\040\157" +
    "\001\001\000\002\001\001\000\012\035\154\036\167\037" +
    "\155\040\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\163\001\001\000\020\016\104\017\071\034\105" +
    "\042\103\045\100\047\072\052\064\001\001\000\002\001" +
    "\001\000\004\013\166\001\001\000\020\016\104\017\071" +
    "\034\105\042\103\045\100\047\072\052\064\001\001\000" +
    "\002\001\001\000\004\020\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\047\115\052\111\057\174\063" +
    "\112\001\001\000\004\021\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\041\125\047\115\052\111\057\131\060\123\061\206\062" +
    "\113\063\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\041\125\047\115\052\111\057\131\060\123\061" +
    "\210\062\113\063\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\213\032\214\001\001\000\002\001" +
    "\001\000\026\011\216\012\215\041\125\047\115\052\111" +
    "\057\131\060\123\061\217\062\113\063\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\221\041\125\047\115\052\111\057\131\060\123\061" +
    "\217\062\113\063\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\041\125\047\115\052" +
    "\111\057\131\060\123\062\225\063\112\001\001\000\004" +
    "\043\226\001\001\000\020\041\125\047\115\052\111\057" +
    "\131\060\123\062\230\063\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\041\125\047\115\052\111\057" +
    "\131\060\123\061\232\062\113\063\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\041\125\047\115\052\111\057\131\060\123" +
    "\061\237\062\113\063\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\250\001\001\000\020\016\252\017\071" +
    "\034\105\042\103\045\100\047\072\052\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\104\017\071" +
    "\034\105\042\103\045\100\047\072\052\064\001\001\000" +
    "\002\001\001\000\030\014\116\015\130\041\125\047\115" +
    "\052\111\055\257\057\131\060\123\061\120\062\113\063" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\266\032\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\041\125\047\115\052\111\057\131\060\123\061\301" +
    "\062\113\063\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\307\033\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\322" +
    "\033\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
	
	public List<CompilerError> synErrors = new ArrayList<>();
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
    public List<CompilerError> getSynErrors(){
    	return synErrors;
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Relop ::= LET 
            {
              Relop RESULT = null;
		 RESULT=new AstLetop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Relop ::= LT 
            {
              Relop RESULT = null;
		 RESULT=new AstLtop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Relop ::= GET 
            {
              Relop RESULT = null;
		 RESULT=new AstGetop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Relop ::= GT 
            {
              Relop RESULT = null;
		 RESULT=new AstGtop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Relop ::= NEQ 
            {
              Relop RESULT = null;
		 RESULT=new AstNeop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Relop ::= EQEQ 
            {
              Relop RESULT = null;
		 RESULT=new AstEqop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(16/*Relop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Mulop ::= MOD 
            {
              Mulop RESULT = null;
		 RESULT=new AstModop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Mulop ::= DIV 
            {
              Mulop RESULT = null;
		 RESULT=new AstDivop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Mulop ::= ASTK 
            {
              Mulop RESULT = null;
		 RESULT=new AstMulop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(15/*Mulop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Addop ::= MINUS 
            {
              Addop RESULT = null;
		 RESULT=new AstSubop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Addop ::= PLUS 
            {
              Addop RESULT = null;
		 RESULT=new AstAddop(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(14/*Addop*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Designator ::= Designator LSQR Expr RSQR 
            {
              Designator RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstIndexDesig(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Designator ::= IDENT 
            {
              Designator RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstDesig(name); RESULT.setLine(nameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(40/*Designator*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondFact ::= Expr Relop Expr 
            {
              CondFact RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int R1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int R1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Relop R1 = (Relop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCondFact(e1, R1, e2); RESULT.setLine(e1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(10/*CondFact*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondTerm ::= CondTerm AND CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C2 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCondTermL(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondTerm ::= CondFact 
            {
              CondTerm RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondFact C1 = (CondFact)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCondTermOne(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(11/*CondTerm*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Condition ::= Condition OR CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C2 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstConditionL(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condition ::= CondTerm 
            {
              Condition RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CondTerm C1 = (CondTerm)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstConditionOne(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(43/*Condition*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OneActualParam ::= Expr 
            {
              OneActualParam RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstOneActualParam(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(8/*OneActualParam*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ActualParamList ::= OneActualParam 
            {
              ActualParamList RESULT = null;
		int O1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OneActualParam O1 = (OneActualParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstActualParam(O1); RESULT.setLine(O1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ActualParamList ::= ActualParamList COMMA OneActualParam 
            {
              ActualParamList RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		ActualParamList A1 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int O2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int O2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		OneActualParam O2 = (OneActualParam)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstActualParamL(A1, O2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(7/*ActualParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ActualParsStart ::= 
            {
              ActualParsStart RESULT = null;
		 RESULT=new AstStartActualParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(24/*ActualParsStart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FuncDesig ::= Designator 
            {
              FuncDesig RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFuncDesig(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(37/*FuncDesig*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ActualPars ::= 
            {
              ActualPars RESULT = null;
		 RESULT=new AstNoActualParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActualPars ::= ActualParsStart ActualParamList 
            {
              ActualPars RESULT = null;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActualParsStart A1 = (ActualParsStart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		ActualParamList A2 = (ActualParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstActualParams(A1, A2); RESULT.setLine(A1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(6/*ActualPars*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Factor ::= NEW Type LSQR Expr RSQR 
            {
              Factor RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstNewArray(t, e); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Factor ::= FuncDesig LPAREN ActualPars RPAREN 
            {
              Factor RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FuncDesig F1 = (FuncDesig)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActualPars A2 = (ActualPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstFuncCallFact(F1, A2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Factor ::= Designator 
            {
              Factor RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Designator d = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstDesigFact(d); RESULT.setLine(dleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Factor ::= LPAREN Expr RPAREN 
            {
              Factor RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstBraceExpr(e); RESULT.setLine(eleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Factor ::= BOOL 
            {
              Factor RESULT = null;
		int B1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int B1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String B1 = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFactBool(B1); RESULT.setLine(B1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Factor ::= CHAR 
            {
              Factor RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character C1 = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFactChar(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Factor ::= NUMBER 
            {
              Factor RESULT = null;
		int N1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int N1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer N1 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFactNum(N1); RESULT.setLine(N1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(49/*Factor*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Term ::= Term Mulop Factor 
            {
              Term RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Term T1 = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Mulop op = (Mulop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstTermL(T1, op, t); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Term ::= Factor 
            {
              Term RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstTermOne(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(45/*Term*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SumExpr ::= Term 
            {
              SumExpr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstTermExpr(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*SumExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SumExpr ::= SumExpr Addop Term 
            {
              SumExpr RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		SumExpr se = (SumExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int A1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Addop A1 = (Addop)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstAddExpr(se, A1, t); RESULT.setLine(seleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(46/*SumExpr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SwitchBegin ::= SWITCH LPAREN Expr RPAREN 
            {
              SwitchBegin RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstSwitchBegin(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(31/*SwitchBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr1 ::= SwitchBegin LBRACE CaseList RBRACE 
            {
              Expr1 RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		SwitchBegin S1 = (SwitchBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CaseList C2 = (CaseList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstSwitchExpr(S1, C2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Expr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr1 ::= SumExpr 
            {
              Expr1 RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SumExpr S1 = (SumExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstPosExpr(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Expr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr1 ::= MINUS SumExpr 
            {
              Expr1 RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		SumExpr S1 = (SumExpr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstNegExpr(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(48/*Expr1*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TerColon ::= COLON 
            {
              TerColon RESULT = null;
		 RESULT=new AstTerColon(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(33/*TerColon*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TerQstmk ::= QSTMK 
            {
              TerQstmk RESULT = null;
		 RESULT=new AstTerQstmk(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(34/*TerQstmk*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr1 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr1 E1 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstNotTerExpr(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr1 TerQstmk Expr1 TerColon Expr1 
            {
              Expr RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr1 E1 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int T2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		TerQstmk T2 = (TerQstmk)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr1 E3 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int T4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		TerColon T4 = (TerColon)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int E5left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E5right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr1 E5 = (Expr1)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstTerExpr(E1, T2, E3, T4, E5); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(47/*Expr*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DoPartOfWhile ::= DO 
            {
              DoPartOfWhile RESULT = null;
		 RESULT=new AstDoPart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(26/*DoPartOfWhile*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // YieldBegin ::= YIELD 
            {
              YieldBegin RESULT = null;
		 RESULT=new AstYieldBegin(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(32/*YieldBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Case ::= DefaultBegin COLON StatementList 
            {
              Case RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DefaultBegin D1 = (DefaultBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StatementList S2 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstDefault(D1, S2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Case*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Case ::= CaseBegin COLON StatementList 
            {
              Case RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CaseBegin C1 = (CaseBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		StatementList S2 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCase(C1, S2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(27/*Case*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DefaultBegin ::= DEFAULT 
            {
              DefaultBegin RESULT = null;
		 RESULT=new AstDefaultBegin(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(30/*DefaultBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CaseBegin ::= CASE NUMBER 
            {
              CaseBegin RESULT = null;
		int numConstleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int numConstright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer numConst = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCaseBegin(numConst); RESULT.setLine(numConstleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(29/*CaseBegin*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CaseList ::= 
            {
              CaseList RESULT = null;
		 RESULT=new AstNoCase(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*CaseList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CaseList ::= Case CaseList 
            {
              CaseList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Case C1 = (Case)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CaseList C2 = (CaseList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCaseList(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(28/*CaseList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ElsePart ::= ELSE 
            {
              ElsePart RESULT = null;
		 RESULT=new AstElsePart(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(36/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IfPart ::= IF LPAREN error RPAREN 
            {
              IfPart RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " condition in if is bad " + ". recovery up to ')'", null); 
				parser.synErrors.add(new CompilerError(eleft, "Bad if condition. Recovery up to ')'", CompilerErrorType.SYNTAX_ERROR));
			 RESULT=new AstIfPartErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*IfPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfPart ::= IF LPAREN Condition RPAREN 
            {
              IfPart RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Condition C1 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstIfPart(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(35/*IfPart*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= LBRACE StatementList RBRACE 
            {
              Statement RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstStmtL(S1); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Statement ::= DoPartOfWhile Statement WHILE LPAREN Condition RPAREN SEMI 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		DoPartOfWhile D1 = (DoPartOfWhile)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int C3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Condition C3 = (Condition)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstDoWhile(D1, S2, C3); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Statement ::= IfPart Statement ElsePart Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		IfPart I1 = (IfPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ElsePart E3 = (ElsePart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S4 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstMatchedIf(I1, S2, E3, S4); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Statement ::= IfPart Statement 
            {
              Statement RESULT = null;
		int I1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int I1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		IfPart I1 = (IfPart)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstUnmatchedIf(I1, S2); RESULT.setLine(I1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Statement ::= YieldBegin Expr SEMI 
            {
              Statement RESULT = null;
		int Y1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int Y1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		YieldBegin Y1 = (YieldBegin)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstYield(Y1, E2); RESULT.setLine(Y1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Statement ::= RETURN SEMI 
            {
              Statement RESULT = null;
		 RESULT=new AstReturnNoExpr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Statement ::= RETURN Expr SEMI 
            {
              Statement RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstReturnExpr(t); RESULT.setLine(tleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Statement ::= CONTINUE SEMI 
            {
              Statement RESULT = null;
		 RESULT=new AstContinueStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= BREAK SEMI 
            {
              Statement RESULT = null;
		 RESULT=new AstBreakStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstReadStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int N2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int N2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer N2 = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstPrintStmtParam(E1, N2); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Statement RESULT = null;
		int E1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Expr E1 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstPrintStmt(E1); RESULT.setLine(E1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Statement ::= Designator EQUAL error SEMI 
            {
              Statement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " assignment error " + ". recovery up to ';'", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad assignment statement. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
			   RESULT=new AstErrAssignment(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Statement ::= DesignatorStatement SEMI 
            {
              Statement RESULT = null;
		int desleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int desright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		DesignatorStatement des = (DesignatorStatement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstDesigStmt(des); RESULT.setLine(desleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(12/*Statement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DesignatorStatement ::= FuncDesig LPAREN ActualPars RPAREN 
            {
              DesignatorStatement RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		FuncDesig F1 = (FuncDesig)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int A2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int A2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		ActualPars A2 = (ActualPars)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstFuncCallStmt(F1, A2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DesignatorStatement ::= Designator DEC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstDecStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DesignatorStatement ::= Designator INC 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstIncStmt(D1); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DesignatorStatement ::= Designator EQUAL Expr 
            {
              DesignatorStatement RESULT = null;
		int D1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int D1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Designator D1 = (Designator)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Expr E2 = (Expr)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstEqualStmt(D1, E2); RESULT.setLine(D1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(13/*DesignatorStatement*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StatementList ::= 
            {
              StatementList RESULT = null;
		 RESULT=new AstNoStmt(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatementList ::= StatementList Statement 
            {
              StatementList RESULT = null;
		int S1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S1 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int S2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int S2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Statement S2 = (Statement)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstStatementL(S1, S2); RESULT.setLine(S1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(9/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FormalParamDecl ::= Type IDENT LSQR RSQR 
            {
              FormalParamDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstFormalParamArrDecl(T1, paramName); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParamDecl ::= Type IDENT 
            {
              FormalParamDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFormalParamDecl(T1, paramName); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(5/*FormalParamDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalParamList ::= FormalParamDecl RPAREN 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		FormalParamDecl F1 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstFormalParamOne(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParamList ::= error RPAREN 
            {
              FormalParamList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " formal params bad" + ". recovery up to ')'", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad formal parameter. Recovery up to ')'", CompilerErrorType.SYNTAX_ERROR));
					 RESULT=new AstFormalParamErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FormalParamList ::= error COMMA 
            {
              FormalParamList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " formal params bad" + ". recovery up to ','", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad formal parameter. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
					 RESULT=new AstFormalParamListErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FormalParamList ::= FormalParamDecl COMMA FormalParamList 
            {
              FormalParamList RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		FormalParamDecl F1 = (FormalParamDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamList F2 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFormalParamL(F1, F2); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(4/*FormalParamList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FormalParams ::= LPAREN RPAREN 
            {
              FormalParams RESULT = null;
		 RESULT=new AstNoFormalParams(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FormalParams ::= LPAREN FormalParamList 
            {
              FormalParams RESULT = null;
		int F1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int F1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		FormalParamList F1 = (FormalParamList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstFormalParams(F1); RESULT.setLine(F1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(3/*FormalParams*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodTypeName ::= VOID IDENT 
            {
              MethodTypeName RESULT = null;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstMethVoidName(methName); RESULT.setLine(methNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MethodTypeName ::= Type IDENT 
            {
              MethodTypeName RESULT = null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type retType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int methNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String methName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstMethTypeName(retType, methName); RESULT.setLine(retTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(42/*MethodTypeName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MethodDecl ::= MethodTypeName FormalParams VarDeclList LBRACE StatementList RBRACE 
            {
              MethodDecl RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		MethodTypeName M1 = (MethodTypeName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int F2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int F2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		FormalParams F2 = (FormalParams)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		VarDeclList V3 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int S4left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int S4right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		StatementList S4 = (StatementList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstMethDecl(M1, F2, V3, S4); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(41/*MethodDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MethodDeclList ::= 
            {
              MethodDeclList RESULT = null;
		 RESULT=new AstNoMethodDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              MethodDeclList RESULT = null;
		int M1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int M1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList M1 = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int M2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int M2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		MethodDecl M2 = (MethodDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstMethDeclL(M1, M2); RESULT.setLine(M1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(1/*MethodDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= IDENT 
            {
              Type RESULT = null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstType(typeName); RESULT.setLine(typeNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(44/*Type*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarAsgnOne ::= IDENT LSQR RSQR 
            {
              VarAsgnOne RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 RESULT=new AstVarArrAsgn(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*VarAsgnOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarAsgnOne ::= IDENT 
            {
              VarAsgnOne RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstVarAsgn(varName); RESULT.setLine(varNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(22/*VarAsgnOne*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarAsgnList ::= error SEMI 
            {
              VarAsgnList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " global variable error" + ". recovery up to ';'", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad global variable declaration error. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
					 RESULT=new AstVarAsgnSemiErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarAsgnList ::= error COMMA 
            {
              VarAsgnList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " global variable error" + ". recovery up to ','", null); 
						parser.synErrors.add(new CompilerError(eleft, "Bad global variable declaration error. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
					 RESULT=new AstVarAsgnCommaErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarAsgnList ::= VarAsgnOne SEMI 
            {
              VarAsgnList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarAsgnOne V1 = (VarAsgnOne)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstVarAsgnSemi(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarAsgnList ::= VarAsgnOne COMMA VarAsgnList 
            {
              VarAsgnList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		VarAsgnOne V1 = (VarAsgnOne)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarAsgnList V2 = (VarAsgnList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstVarAsgnL(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(21/*VarAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VarDecl ::= Type VarAsgnList 
            {
              VarDecl RESULT = null;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type varType = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarAsgnList V1 = (VarAsgnList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstVarDecl(varType, V1); RESULT.setLine(varTypeleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(2/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDeclList ::= 
            {
              VarDeclList RESULT = null;
		 RESULT=new AstNoVarDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDeclList ::= VarDeclList VarDecl 
            {
              VarDeclList RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		VarDeclList V1 = (VarDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V2 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstVarDeclL(V1, V2); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(50/*VarDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CnstAsgn ::= IDENT EQUAL BOOL 
            {
              CnstAsgn RESULT = null;
		int cnstNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cnstNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cnstName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCnstAsgnBool(cnstName, value); RESULT.setLine(cnstNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*CnstAsgn*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CnstAsgn ::= IDENT EQUAL CHAR 
            {
              CnstAsgn RESULT = null;
		int cnstNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cnstNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cnstName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCnstAsgnChar(cnstName, value); RESULT.setLine(cnstNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*CnstAsgn*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CnstAsgn ::= IDENT EQUAL NUMBER 
            {
              CnstAsgn RESULT = null;
		int cnstNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cnstNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cnstName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCnstAsgnInt(cnstName, value); RESULT.setLine(cnstNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(25/*CnstAsgn*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CnstAsgnList ::= error SEMI 
            {
              CnstAsgnList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " global constant error" + ". recovery up to ';'", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad global constant declaration error. Recovery up to ';'", CompilerErrorType.SYNTAX_ERROR));
				 RESULT=new AstCnstAsgnSemiErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CnstAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CnstAsgnList ::= error COMMA 
            {
              CnstAsgnList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 	parser.report_error("Syntax error in line " + eleft + " global constant error" + ". recovery up to ','", null); 
					parser.synErrors.add(new CompilerError(eleft, "Bad global constant declaration error. Recovery up to ','", CompilerErrorType.SYNTAX_ERROR));
				 RESULT=new AstCnstAsgnCommaErr(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CnstAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CnstAsgnList ::= CnstAsgn SEMI 
            {
              CnstAsgnList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		CnstAsgn C1 = (CnstAsgn)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstCnstAsgnOne(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CnstAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CnstAsgnList ::= CnstAsgn COMMA CnstAsgnList 
            {
              CnstAsgnList RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		CnstAsgn C1 = (CnstAsgn)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CnstAsgnList C2 = (CnstAsgnList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCnstAsgnL(C1, C2); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(20/*CnstAsgnList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CnstDecl ::= CONST Type CnstAsgnList 
            {
              CnstDecl RESULT = null;
		int T1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int T1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Type T1 = (Type)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int C2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CnstAsgnList C2 = (CnstAsgnList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstCnstDecl(T1, C2); RESULT.setLine(T1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(19/*CnstDecl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl ::= VarDecl 
            {
              Decl RESULT = null;
		int V1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		VarDecl V1 = (VarDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstGlobVarDecl(V1); RESULT.setLine(V1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl ::= CnstDecl 
            {
              Decl RESULT = null;
		int C1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int C1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		CnstDecl C1 = (CnstDecl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstGlobCnstDecl(C1); RESULT.setLine(C1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(18/*Decl*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobDeclList ::= 
            {
              GlobDeclList RESULT = null;
		 RESULT=new AstNoGlobDecl(); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*GlobDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobDeclList ::= GlobDeclList Decl 
            {
              GlobDeclList RESULT = null;
		int G1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int G1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		GlobDeclList G1 = (GlobDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int D2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int D2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		Decl D2 = (Decl)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstGlobDeclL(G1, D2); RESULT.setLine(G1left); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(17/*GlobDeclList*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              ProgName RESULT = null;
		int progleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right;
		String prog = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).value;
		 RESULT=new AstProgName(prog); RESULT.setLine(progleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(39/*ProgName*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              SyntaxNode RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName GlobDeclList LBRACE MethodDeclList RBRACE 
            {
              Program RESULT = null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		ProgName progName = (ProgName)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		GlobDeclList decls = (GlobDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int methodsleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int methodsright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		MethodDeclList methods = (MethodDeclList)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT=new AstProgram(progName, decls, methods); RESULT.setLine(progNameleft); 
              CUP$MJParser$result = new java_cup.runtime.Symbol(38/*Program*/, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-0)).right, RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

