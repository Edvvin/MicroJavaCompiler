package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, LSQR, RSQR, SEMI, LPAREN, RPAREN, CONST, COMMA, PRINT, RETURN, VOID, NEW, CONTINUE, WHILE ;
terminal PLUS, MINUS, ASTK, DIV, MOD, AND, OR, INC, DEC, EQUAL, GT, GET, LT, LET, EQEQ, NEQ, READ, BREAK, DO, QSTMK, COLON;
terminal EXTENDS, DOT, SWITCH, ENUM, CLASS, CASE ;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR ;
terminal Boolean BOOL ;
terminal IF, ELSE ;

nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal FormalParams FormalParams ;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Relop Relop; 
nonterminal StatementList StatementList;
nonterminal Condition Condition;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal SumExpr SumExpr;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Addop Addop;
nonterminal Mulop Mulop ;
nonterminal GlobDeclList GlobDeclList;
nonterminal Decl Decl;
nonterminal CnstDecl CnstDecl;
nonterminal CnstAsgnList CnstAsgnList;
nonterminal CnstValue CnstValue;
nonterminal VarAsgnList VarAsgnList;
nonterminal VarAsgnOne VarAsgnOne;
nonterminal MethodType MethodType ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, Designator, MethodDecl, MethodTypeName ; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Expr1, Factor, VarDeclList ; 

precedence left ELSE ;

Program ::= (Program) PROG IDENT:progName GlobDeclList:decls LBRACE MethodDeclList:methods RBRACE {: RESULT=new Program(progName, decls, methods); RESULT.setLine(progNameleft); :} 
;

GlobDeclList ::= (GlobDeclList) GlobDeclList:G1 Decl:D2 {: RESULT=new GlobDeclList(G1, D2); RESULT.setLine(G1left); :}
			|
			(NoGlobDecl) {: RESULT=new NoGlobDecl(); :} /* epsilon */
			;

Decl ::= (GlobCnstDecl) CnstDecl:C1 {: RESULT=new GlobCnstDecl(C1); RESULT.setLine(C1left); :}
		|
		(GlobVarDecl) VarDecl:V1 {: RESULT=new GlobVarDecl(V1); RESULT.setLine(V1left); :}
		;
		
CnstDecl ::= (CnstDecl) CONST Type:T1 CnstAsgnList:C2 {: RESULT=new CnstDecl(T1, C2); RESULT.setLine(T1left); :};

CnstAsgnList ::= (CnstAsgn) IDENT:I1 EQUAL CnstValue:C2 COMMA CnstAsgnList:C3 {: RESULT=new CnstAsgn(I1, C2, C3); RESULT.setLine(I1left); :}
				|
				(CnstAsgnLast) IDENT:I1 EQUAL CnstValue:C2 SEMI {: RESULT=new CnstAsgnLast(I1, C2); RESULT.setLine(I1left); :}
				|
				(CnstAsgnCommaErr) error COMMA
				{: parser.report_error("Syntax Error: Bad declaration of global constant in line " + lleft + ". Recovered until ','", null); :} {: RESULT=new CnstAsgnCommaErr(); :}
				|
				(CnstAsgnSemiErr) error SEMI
				{: parser.report_error("Syntax Error: Bad declaration of global constant in line " + lleft + ". Recovered until ';'", null); :} {: RESULT=new CnstAsgnSemiErr(); :}
				;

CnstValue ::= (CnstNum) NUMBER:N1 {: RESULT=new CnstNum(N1); RESULT.setLine(N1left); :}
			|
			(CnstChr) CHAR:C1 {: RESULT=new CnstChr(C1); RESULT.setLine(C1left); :}
			|
			(CnstBool) BOOL:B1 {: RESULT=new CnstBool(B1); RESULT.setLine(B1left); :}
			;

VarDeclList ::= (VarDeclList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclList(V1, V2); RESULT.setLine(V1left); :}
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
				;

VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI {: RESULT=new VarDecl(varType, varName); RESULT.setLine(varTypeleft); :} 
				|
				(VarArrDecl) Type:varType LSQR RSQR IDENT:varName SEMI {: RESULT=new VarArrDecl(varType, varName); RESULT.setLine(varTypeleft); :}
				;

VarAsgnList ::= (VarAsgn) VarAsgnOne:V1 COMMA VarAsgnList:V2 {: RESULT=new VarAsgn(V1, V2); RESULT.setLine(V1left); :}
					|
					(VarAsgnLast) VarAsgnOne:V1 SEMI {: RESULT=new VarAsgnLast(V1); RESULT.setLine(V1left); :}
					|
					(VarAsgnCommaErr) error COMMA
					{: parser.report_error("Syntax Error: Bad declaration of global variable in line " + lleft + ". Recovered until ','", null); :} {: RESULT=new VarAsgnCommaErr(); :}
					|
					(VarAsgnSemiErr) error SEMI
					{: parser.report_error("Syntax Error: Bad declaration of global variable in line " + lleft + ". Recovered until ';'", null); :} {: RESULT=new VarAsgnSemiErr(); :}
					;
				
VarAsgnOne ::= (VarAsgnOne) IDENT:I1 {: RESULT=new VarAsgnOne(I1); RESULT.setLine(I1left); :}
					|
					(VarArrAsgnOne) IDENT:I1 LSQR RSQR {: RESULT=new VarArrAsgnOne(I1); RESULT.setLine(I1left); :}
					;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:M1
			   FormalParams:F2 VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= (MethodTypeName) MethodType:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
;

MethodType ::= (MethodVoid) VOID {: RESULT=new MethodVoid(); :}
				|
				(MethodType) Type:T1 {: RESULT=new MethodType(T1); RESULT.setLine(T1left); :}
				;

FormalParams ::= (FormalParams) LPAREN FormalParamList:F1 RPAREN {: RESULT=new FormalParams(F1); RESULT.setLine(F1left); :}
				|
				(FormalParamsErr) LPAREN error RPAREN
				{: parser.report_error("Syntax Error: Formal parameters invalid in line " + lleft + " Recovered until ')'", null ); :} {: RESULT=new FormalParamsErr(); :}
				;

FormalParamList ::= (FormalParamList) FormalParamDecl:F1 COMMA FormalParamList:F2 {: RESULT=new FormalParamList(F1, F2); RESULT.setLine(F1left); :}
					|
					(FormalParamListErr) error COMMA
					{: parser.report_error("Syntax Error: Formal parameters invalid in line " + lleft + " Recovered until ','", null ); :} {: RESULT=new FormalParamListErr(); :}
					|
					(FormalParamLast) FormalParamDecl:F1 {: RESULT=new FormalParamLast(F1); RESULT.setLine(F1left); :}
					|
					(NoFormalParams) {: RESULT=new NoFormalParams(); :} /* epsilon */
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl(T1, I2); RESULT.setLine(T1left); :} 
					|
					(FormalParamArrDecl) Type:T1 IDENT:I2 LSQR RSQR {: RESULT=new FormalParamArrDecl(T1, I2); RESULT.setLine(T1left); :} 
					;
					
StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;
				  
DesignatorStatement ::= (EqualStmt) Designator:D1 EQUAL Expr:E2 {: RESULT=new EqualStmt(D1, E2); RESULT.setLine(D1left); :} 
					|
					(IncStmt) Designator:D1 INC {: RESULT=new IncStmt(D1); RESULT.setLine(D1left); :}
					|
					(DecStmt) Designator:D1 DEC {: RESULT=new DecStmt(D1); RESULT.setLine(D1left); :}
					|
					(FuncCallStmt) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new FuncCallStmt(D1, A2); RESULT.setLine(D1left); :}
;

Statement ::= (DesigStmt) DesignatorStatement:des SEMI {: RESULT=new DesigStmt(des); RESULT.setLine(desleft); :} 
			  |
			  (ErrAssignment) Designator:D1 EQUAL error SEMI
			  {: parser.report_error("Syntax Error: Bad assignment of designator in line " + lleft + ". Recovered until ';'", null ); :} {: RESULT=new ErrAssignment(D1); RESULT.setLine(D1left); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
			  (PrintStmtParam) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtParam(E1, N2); RESULT.setLine(E1left); :} 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :} 
			  |
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  | 
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  | 
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  | 
			  (UnmatchedIf) IF LPAREN Expr:E1 RPAREN Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
			  |
			  (MatchedIf) IF LPAREN Expr:E1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new MatchedIf(E1, S2, S3); RESULT.setLine(E1left); :}
			  |
			  (IfErr) IF LPAREN error RPAREN
			  {: parser.report_error("Syntax Error: Bad condition in if statement in line " + lleft + ". Recovered until ')'", null ); :} {: RESULT=new IfErr(); :}
			  |
			  (DoWhile) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhile(S1, C2); RESULT.setLine(S1left); :}
			  |
			  (StmtList) LBRACE StatementList:S1 RBRACE {: RESULT=new StmtList(S1); RESULT.setLine(S1left); :}
			  ;
			  
Expr ::= (TerExpr) Expr1:E1 QSTMK Expr1:E2 COLON Expr1:E3 {: RESULT=new TerExpr(E1, E2, E3); RESULT.setLine(E1left); :}
		|
		(Expr) Expr1:E1 {: RESULT=new Expr(E1); RESULT.setLine(E1left); :}
		;
		
Expr1 ::= (NegExpr) MINUS SumExpr:S1 {: RESULT=new NegExpr(S1); RESULT.setLine(S1left); :}
		|
		(PosExpr) SumExpr:S1 {: RESULT=new PosExpr(S1); RESULT.setLine(S1left); :}
		;


SumExpr ::= (AddExpr) Term:t Addop:A1 SumExpr:se {: RESULT=new AddExpr(t, A1, se); RESULT.setLine(tleft); :} 
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :} 
		|
		(Terms) Term:T1 Mulop:op Factor:t {: RESULT=new Terms(T1, op, t); RESULT.setLine(T1left); :}
;

Factor ::= (NumCnst) NUMBER:N1 {: RESULT=new NumCnst(N1); RESULT.setLine(N1left); :}
			|
			(CharCnst) CHAR:C1 {: RESULT=new CharCnst(C1); RESULT.setLine(C1left); :}
			|
			(BoolCnst) BOOL:B1 {: RESULT=new BoolCnst(B1); RESULT.setLine(B1left); :}
			|
			(BraceExpr) LPAREN Expr:e RPAREN {: RESULT=new BraceExpr(e); RESULT.setLine(eleft); :} 
			|
		   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		    |
		   (FuncCallFact) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCallFact(func, A1); RESULT.setLine(funcleft); :}
		    |
		   (NewObj) NEW Type:t LSQR Expr:e RSQR {: RESULT=new NewObj(t, e); RESULT.setLine(tleft); :}
		   ;

ActualPars ::= (ActualParams) ActualParamList:A1 {: RESULT=new ActualParams(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParamsList) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParamsList(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParamsLast) Expr:E1 {: RESULT=new ActualParamsLast(E1); RESULT.setLine(E1left); :}
					;
					
Condition ::= (Condition) CondTerm:C1 {: RESULT=new Condition(C1); RESULT.setLine(C1left); :}
			|
			(ConditionList) CondTerm:C1 OR Condition:C2 {: RESULT=new ConditionList(C1, C2); RESULT.setLine(C1left); :}
			;

CondTerm ::= (CondTerm)	CondFact:C1 {: RESULT=new CondTerm(C1); RESULT.setLine(C1left); :}
			|
			(CondTermList) CondFact:C1 AND CondTerm:C2 {: RESULT=new CondTermList(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondFact) Expr:E1 {: RESULT=new CondFact(E1); RESULT.setLine(E1left); :}
			|
			(CondFactList) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactList(E1, R2, E3); RESULT.setLine(E1left); :}
			;

Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :} 
				|
				(IndexDesig) IDENT:name LSQR Expr:E1 RSQR {: RESULT=new IndexDesig(name, E1); RESULT.setLine(nameleft); :} 
;

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} 
		| 
		(Subop) MINUS {: RESULT=new Subop(); :}
;

Mulop ::= (Mulop) ASTK {: RESULT=new Mulop(); :} 
		| 
		(Divop) DIV {: RESULT=new Divop(); :} 
		| 
		(Modop) MOD {: RESULT=new Modop(); :}
;

Relop ::= (Eqop) EQEQ {: RESULT=new Eqop(); :}
			|
			(Gtop) GT {: RESULT=new Gtop(); :}
			|
			(Getop) GET {: RESULT=new Getop(); :}
			|
			(Ltop) LT {: RESULT=new Ltop(); :}
			|
			(Letop) LET {: RESULT=new Letop(); :}
			;