package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, LSQR, RSQR, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, VOID, NEW, CONTINUE, WHILE ;
terminal PLUS, MINUS, ASTK, DIV, MOD, AND, OR, INC, DEC, EQUAL, GT, GET, LT, LET, EQEQ, NEQ, READ, BREAK, DO, QSTMK, COLON;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR ;
terminal Boolean BOOL ;
terminal IF, ELSE ;

nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl ;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal Relop Relop; 
nonterminal StatementList StatementList;
nonterminal Condition Condition;
nonterminal CondFact CondFact;
nonterminal CondTerm CondTerm;
nonterminal SumExpr SumExpr;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Addop Addop;
nonterminal Mulop Mulop ;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName ; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, VarDeclList ; 

precedence left ELSE ;

Program ::= (Program) PROG ProgName:p VarDeclList:V1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, V1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :}/* epsilon */ 
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName SEMI {: RESULT=new VarDecl(varType, varName); RESULT.setLine(varTypeleft); :} 
;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName:M1
			   LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   ;

MethodTypeName ::= (MethodTypeName) Type:retType IDENT:methName {: RESULT=new MethodTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} | (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:I2 {: RESULT=new FormalParamDecl(T1, I2); RESULT.setLine(T1left); :} ;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
					|
				  (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				  ;
				  
DesignatorStatement ::= (EqualStmt) Designator:D1 EQUAL Expr:E2 {: RESULT=new EqualStmt(D1, E2); RESULT.setLine(D1left); :} 
					|
					(IncStmt) Designator:D1 INC {: RESULT=new IncStmt(D1); RESULT.setLine(D1left); :}
					|
					(DecStmt) Designator:D1 DEC {: RESULT=new DecStmt(D1); RESULT.setLine(D1left); :}
					|
					(FuncCallStmt) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new FuncCallStmt(D1, A2); RESULT.setLine(D1left); :}
;

Statement ::= (DesignatorStatement) DesignatorStatement:des SEMI {: RESULT=new DesignatorStatement(des); RESULT.setLine(desleft); :} 
			  |
			  (ErrAssignment) Designator:D1 EQUAL error SEMI
			  {: parser.log.debug("Uspesan oporavak od greske pri dodeli vrednosti."); :} {: RESULT=new ErrAssignment(D1); RESULT.setLine(D1left); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
			  (PrintStmtParam) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtParam(E1, N2); RESULT.setLine(E1left); :} 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :} 
			  |
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  | 
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  | 
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  | 
			  (UnmatchedIf) IF LPAREN Expr:E1 RPAREN Statement:S2 {: RESULT=new UnmatchedIf(E1, S2); RESULT.setLine(E1left); :}
			  |
			  (MatchedIf) IF LPAREN Expr:E1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new MatchedIf(E1, S2, S3); RESULT.setLine(E1left); :}
			  |
			  (DoWhile) DO Statement:S1 WHILE LPAREN Condition:C2 RPAREN SEMI {: RESULT=new DoWhile(S1, C2); RESULT.setLine(S1left); :}
			  |
			  (StmtList) LBRACE StatementList:S1 RBRACE {: RESULT=new StmtList(S1); RESULT.setLine(S1left); :}
			  ;
			  
Expr ::= (NegExpr) MINUS SumExpr:S1 {: RESULT=new NegExpr(S1); RESULT.setLine(S1left); :}
		|
		(PosExpr) SumExpr:S1 {: RESULT=new PosExpr(S1); RESULT.setLine(S1left); :}
		|
		(TerExpr) Condition:C1 QSTMK Expr:E2 COLON Expr:E3 {: RESULT=new TerExpr(C1, E2, E3); RESULT.setLine(C1left); :}
		;

SumExpr ::= (AddExpr) SumExpr:se Addop:A1 Term:t {: RESULT=new AddExpr(se, A1, t); RESULT.setLine(seleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 ;

Term ::= (Term) Factor:t {: RESULT=new Term(t); RESULT.setLine(tleft); :} 
		|
		(Terms) Term:T1 Mulop:op Factor:t {: RESULT=new Terms(T1, op, t); RESULT.setLine(T1left); :}
;

Factor ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
			|
			(CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
			|
			(BoolConst) BOOL:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
			|
			(BraceExpr) LPAREN Expr:e RPAREN {: RESULT=new BraceExpr(e); RESULT.setLine(eleft); :} 
			|
		   (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		    |
		   (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		    |
		   (NewObj) NEW Type:t LSQR Expr:e RSQR {: RESULT=new NewObj(t, e); RESULT.setLine(tleft); :}
		   ;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;
					
Condition ::= (CondTerm) CondTerm:C1 {: RESULT=new CondTerm(C1); RESULT.setLine(C1left); :}
			|
			(CondTerms) CondTerm:C1 OR Condition:C2 {: RESULT=new CondTerms(C1, C2); RESULT.setLine(C1left); :}
			;

CondTerm ::= (CondFact)	CondFact:C1 {: RESULT=new CondFact(C1); RESULT.setLine(C1left); :}
			|
			(CondFacts) CondFact:C1 AND CondTerm:C2 {: RESULT=new CondFacts(C1, C2); RESULT.setLine(C1left); :}
			;

CondFact ::= (CondExpr) Expr:E1 {: RESULT=new CondExpr(E1); RESULT.setLine(E1left); :}
			|
			(CondRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondRelop(E1, R2, E3); RESULT.setLine(E1left); :}
			;

Designator ::= (Designator) IDENT:name {: RESULT=new Designator(name); RESULT.setLine(nameleft); :} 
				|
				(IndexDesig) IDENT:name LSQR Expr:E1 RSQR {: RESULT=new IndexDesig(name, E1); RESULT.setLine(nameleft); :} 
;

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} 
		| 
		(Subop) MINUS {: RESULT=new Subop(); :}
;

Mulop ::= (Mulop) ASTK {: RESULT=new Mulop(); :} 
		| 
		(Divop) DIV {: RESULT=new Divop(); :} 
		| 
		(Modop) MOD {: RESULT=new Modop(); :}
;

Relop ::= (Eqop) EQEQ {: RESULT=new Eqop(); :}
			|
			(Gtop) GT {: RESULT=new Gtop(); :}
			|
			(Getop) GET {: RESULT=new Getop(); :}
			|
			(Ltop) LT {: RESULT=new Ltop(); :}
			|
			(Letop) LET {: RESULT=new Letop(); :}
			;