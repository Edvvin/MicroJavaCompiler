INFO  14:58:46,389 - Compiling source file: /home/edvin/Desktop/ppp/MicroJavaCompiler/test/program.mj
INFO  14:58:46,413 - #2 program
INFO  14:58:46,414 - #50 SyntaxTest
INFO  14:58:46,414 - #50 int
INFO  14:58:46,414 - #50 bananas
INFO  14:58:46,414 - #50 char
ERROR 14:58:46,414 - 
Sintaksna greska na liniji 2
INFO  14:58:46,414 - #11 ,
INFO  14:58:46,414 - #50 asdf
INFO  14:58:46,414 - #7 ;
INFO  14:58:46,415 - #10 const
INFO  14:58:46,415 - #50 char
INFO  14:58:46,415 - #50 o
ERROR 14:58:46,415 - Syntax error in line 2 global variable error. recovery up to ';'
INFO  14:58:46,416 - #27 =
INFO  14:58:46,416 - #51 o
INFO  14:58:46,416 - #11 ,
INFO  14:58:46,417 - #51 o
ERROR 14:58:46,417 - 
Sintaksna greska na liniji 3
INFO  14:58:46,417 - #7 ;
INFO  14:58:46,417 - #3 {
INFO  14:58:46,417 - #14 void
INFO  14:58:46,417 - #50 main
ERROR 14:58:46,417 - Syntax error in line 3 global constant error. recovery up to ';'
INFO  14:58:46,418 - #8 (
INFO  14:58:46,418 - #9 )
INFO  14:58:46,418 - #3 {
INFO  14:58:46,418 - #4 }
INFO  14:58:46,419 - #50 int
INFO  14:58:46,419 - #50 test1
INFO  14:58:46,419 - #8 (
INFO  14:58:46,419 - #50 int
INFO  14:58:46,419 - #50 a
INFO  14:58:46,419 - #11 ,
INFO  14:58:46,419 - #50 int
INFO  14:58:46,419 - #50 b
INFO  14:58:46,420 - #11 ,
INFO  14:58:46,420 - #50 int
INFO  14:58:46,420 - #50 c
INFO  14:58:46,420 - #50 c
ERROR 14:58:46,420 - 
Sintaksna greska na liniji 10
INFO  14:58:46,420 - #9 )
INFO  14:58:46,420 - #3 {
INFO  14:58:46,420 - #13 return
INFO  14:58:46,420 - #49 5
ERROR 14:58:46,420 - Syntax error in line 10 formal params bad. recovery up to ')'
INFO  14:58:46,421 - #7 ;
INFO  14:58:46,421 - #4 }
INFO  14:58:46,421 - #14 void
INFO  14:58:46,421 - #50 test2
INFO  14:58:46,421 - #8 (
INFO  14:58:46,421 - #50 int
INFO  14:58:46,421 - #50 x
INFO  14:58:46,421 - #11 ,
INFO  14:58:46,421 - #50 int
INFO  14:58:46,421 - #50 y
INFO  14:58:46,422 - #50 y
ERROR 14:58:46,422 - 
Sintaksna greska na liniji 14
INFO  14:58:46,422 - #11 ,
INFO  14:58:46,422 - #50 int
INFO  14:58:46,422 - #50 z
INFO  14:58:46,422 - #9 )
INFO  14:58:46,422 - #3 {
ERROR 14:58:46,422 - Syntax error in line 14 formal params bad. recovery up to ','
INFO  14:58:46,422 - #39 if
INFO  14:58:46,422 - #8 (
INFO  14:58:46,422 - #52 true
INFO  14:58:46,423 - #5 [
ERROR 14:58:46,423 - 
Sintaksna greska na liniji 15
INFO  14:58:46,423 - #49 5
INFO  14:58:46,423 - #6 ]
INFO  14:58:46,423 - #9 )
INFO  14:58:46,423 - #3 {
INFO  14:58:46,423 - #12 print
INFO  14:58:46,423 - #8 (
ERROR 14:58:46,423 - Syntax error in line 15 condition in if is bad . recovery up to ')'
INFO  14:58:46,423 - #51 i
INFO  14:58:46,423 - #9 )
INFO  14:58:46,423 - #7 ;
INFO  14:58:46,424 - #12 print
INFO  14:58:46,424 - #8 (
INFO  14:58:46,424 - #51 t
INFO  14:58:46,424 - #9 )
INFO  14:58:46,424 - #7 ;
INFO  14:58:46,424 - #12 print
INFO  14:58:46,424 - #8 (
INFO  14:58:46,424 - #51 w
INFO  14:58:46,424 - #9 )
INFO  14:58:46,424 - #7 ;
INFO  14:58:46,424 - #12 print
INFO  14:58:46,424 - #8 (
INFO  14:58:46,424 - #50 o
INFO  14:58:46,424 - #9 )
INFO  14:58:46,424 - #7 ;
INFO  14:58:46,424 - #12 print
INFO  14:58:46,425 - #8 (
INFO  14:58:46,425 - #51 r
INFO  14:58:46,425 - #9 )
INFO  14:58:46,425 - #7 ;
INFO  14:58:46,425 - #12 print
INFO  14:58:46,425 - #8 (
INFO  14:58:46,425 - #51 k
INFO  14:58:46,425 - #9 )
INFO  14:58:46,425 - #7 ;
INFO  14:58:46,425 - #12 print
INFO  14:58:46,425 - #8 (
INFO  14:58:46,425 - #51 s
INFO  14:58:46,425 - #9 )
INFO  14:58:46,425 - #7 ;
INFO  14:58:46,425 - #4 }
INFO  14:58:46,425 - #4 }
INFO  14:58:46,425 - #4 }
INFO  14:58:46,427 - AstProgram(
  AstProgName(
   SyntaxTest
  ) [AstProgName]
  AstGlobDeclL(
    AstGlobDeclL(
      AstNoGlobDecl(
      ) [AstNoGlobDecl]
      AstGlobVarDecl(
        AstVarDecl(
          AstType(
           int
          ) [AstType]
          AstVarAsgnSemiErr(
          ) [AstVarAsgnSemiErr]
        ) [AstVarDecl]
      ) [AstGlobVarDecl]
    ) [AstGlobDeclL]
    AstGlobCnstDecl(
      AstCnstDecl(
        AstType(
         char
        ) [AstType]
        AstCnstAsgnL(
          AstCnstAsgnChar(
           o
           o
          ) [AstCnstAsgnChar]
          AstCnstAsgnSemiErr(
          ) [AstCnstAsgnSemiErr]
        ) [AstCnstAsgnL]
      ) [AstCnstDecl]
    ) [AstGlobCnstDecl]
  ) [AstGlobDeclL]
  AstMethDeclL(
    AstMethDeclL(
      AstMethDeclL(
        AstNoMethodDecl(
        ) [AstNoMethodDecl]
        AstMethDecl(
          AstMethVoidName(
           main
          ) [AstMethVoidName]
          AstNoFormalParams(
          ) [AstNoFormalParams]
          AstNoVarDecl(
          ) [AstNoVarDecl]
          AstNoStmt(
          ) [AstNoStmt]
        ) [AstMethDecl]
      ) [AstMethDeclL]
      AstMethDecl(
        AstMethTypeName(
          AstType(
           int
          ) [AstType]
         test1
        ) [AstMethTypeName]
        AstFormalParams(
          AstFormalParamL(
            AstFormalParamDeclComma(
              AstFormalParamDecl(
                AstType(
                 int
                ) [AstType]
               a
              ) [AstFormalParamDecl]
            ) [AstFormalParamDeclComma]
            AstFormalParamL(
              AstFormalParamDeclComma(
                AstFormalParamDecl(
                  AstType(
                   int
                  ) [AstType]
                 b
                ) [AstFormalParamDecl]
              ) [AstFormalParamDeclComma]
              AstFormalParamErr(
              ) [AstFormalParamErr]
            ) [AstFormalParamL]
          ) [AstFormalParamL]
        ) [AstFormalParams]
        AstNoVarDecl(
        ) [AstNoVarDecl]
        AstStatementL(
          AstNoStmt(
          ) [AstNoStmt]
          AstReturnExpr(
            AstNotTerExpr(
              AstPosExpr(
                AstTermExpr(
                  AstTermOne(
                    AstFactNum(
                     5
                    ) [AstFactNum]
                  ) [AstTermOne]
                ) [AstTermExpr]
              ) [AstPosExpr]
            ) [AstNotTerExpr]
          ) [AstReturnExpr]
        ) [AstStatementL]
      ) [AstMethDecl]
    ) [AstMethDeclL]
    AstMethDecl(
      AstMethVoidName(
       test2
      ) [AstMethVoidName]
      AstFormalParams(
        AstFormalParamL(
          AstFormalParamDeclComma(
            AstFormalParamDecl(
              AstType(
               int
              ) [AstType]
             x
            ) [AstFormalParamDecl]
          ) [AstFormalParamDeclComma]
          AstFormalParamL(
            AstFormalParamListErr(
            ) [AstFormalParamListErr]
            AstFormalParamOne(
              AstFormalParamDecl(
                AstType(
                 int
                ) [AstType]
               z
              ) [AstFormalParamDecl]
            ) [AstFormalParamOne]
          ) [AstFormalParamL]
        ) [AstFormalParamL]
      ) [AstFormalParams]
      AstNoVarDecl(
      ) [AstNoVarDecl]
      AstStatementL(
        AstNoStmt(
        ) [AstNoStmt]
        AstUnmatchedIf(
          AstIfPartErr(
          ) [AstIfPartErr]
          AstStmtL(
            AstStatementL(
              AstStatementL(
                AstStatementL(
                  AstStatementL(
                    AstStatementL(
                      AstStatementL(
                        AstStatementL(
                          AstNoStmt(
                          ) [AstNoStmt]
                          AstPrintStmt(
                            AstNotTerExpr(
                              AstPosExpr(
                                AstTermExpr(
                                  AstTermOne(
                                    AstFactChar(
                                     i
                                    ) [AstFactChar]
                                  ) [AstTermOne]
                                ) [AstTermExpr]
                              ) [AstPosExpr]
                            ) [AstNotTerExpr]
                          ) [AstPrintStmt]
                        ) [AstStatementL]
                        AstPrintStmt(
                          AstNotTerExpr(
                            AstPosExpr(
                              AstTermExpr(
                                AstTermOne(
                                  AstFactChar(
                                   t
                                  ) [AstFactChar]
                                ) [AstTermOne]
                              ) [AstTermExpr]
                            ) [AstPosExpr]
                          ) [AstNotTerExpr]
                        ) [AstPrintStmt]
                      ) [AstStatementL]
                      AstPrintStmt(
                        AstNotTerExpr(
                          AstPosExpr(
                            AstTermExpr(
                              AstTermOne(
                                AstFactChar(
                                 w
                                ) [AstFactChar]
                              ) [AstTermOne]
                            ) [AstTermExpr]
                          ) [AstPosExpr]
                        ) [AstNotTerExpr]
                      ) [AstPrintStmt]
                    ) [AstStatementL]
                    AstPrintStmt(
                      AstNotTerExpr(
                        AstPosExpr(
                          AstTermExpr(
                            AstTermOne(
                              AstDesigFact(
                                AstDesig(
                                 o
                                ) [AstDesig]
                              ) [AstDesigFact]
                            ) [AstTermOne]
                          ) [AstTermExpr]
                        ) [AstPosExpr]
                      ) [AstNotTerExpr]
                    ) [AstPrintStmt]
                  ) [AstStatementL]
                  AstPrintStmt(
                    AstNotTerExpr(
                      AstPosExpr(
                        AstTermExpr(
                          AstTermOne(
                            AstFactChar(
                             r
                            ) [AstFactChar]
                          ) [AstTermOne]
                        ) [AstTermExpr]
                      ) [AstPosExpr]
                    ) [AstNotTerExpr]
                  ) [AstPrintStmt]
                ) [AstStatementL]
                AstPrintStmt(
                  AstNotTerExpr(
                    AstPosExpr(
                      AstTermExpr(
                        AstTermOne(
                          AstFactChar(
                           k
                          ) [AstFactChar]
                        ) [AstTermOne]
                      ) [AstTermExpr]
                    ) [AstPosExpr]
                  ) [AstNotTerExpr]
                ) [AstPrintStmt]
              ) [AstStatementL]
              AstPrintStmt(
                AstNotTerExpr(
                  AstPosExpr(
                    AstTermExpr(
                      AstTermOne(
                        AstFactChar(
                         s
                        ) [AstFactChar]
                      ) [AstTermOne]
                    ) [AstTermExpr]
                  ) [AstPosExpr]
                ) [AstNotTerExpr]
              ) [AstPrintStmt]
            ) [AstStatementL]
          ) [AstStmtL]
        ) [AstUnmatchedIf]
      ) [AstStatementL]
    ) [AstMethDecl]
  ) [AstMethDeclL]
) [AstProgram]
INFO  14:58:46,432 - Constant declared o on line 3
INFO  14:58:46,432 - Function mainis being defined on line 6
INFO  14:58:46,432 - Function test1 is being defined on line 10
INFO  14:58:46,432 - Variable declared a on line 10
INFO  14:58:46,433 - Variable declared b on line 10
INFO  14:58:46,433 - Function test2is being defined on line 14
INFO  14:58:46,433 - Variable declared x on line 14
INFO  14:58:46,433 - Variable declared z on line 14
ERROR 14:58:46,436 - 
java.util.EmptyStackException
	at java.base/java.util.Stack.peek(Stack.java:101)
	at java.base/java.util.Stack.pop(Stack.java:83)
	at rs.ac.bg.etf.pp1.CodeGenerator.visit(CodeGenerator.java:207)
	at rs.ac.bg.etf.pp1.ast.AstUnmatchedIf.accept(AstUnmatchedIf.java:37)
	at rs.ac.bg.etf.pp1.ast.AstUnmatchedIf.traverseBottomUp(AstUnmatchedIf.java:54)
	at rs.ac.bg.etf.pp1.ast.AstStatementL.traverseBottomUp(AstStatementL.java:53)
	at rs.ac.bg.etf.pp1.ast.AstMethDecl.traverseBottomUp(AstMethDecl.java:81)
	at rs.ac.bg.etf.pp1.ast.AstMethDeclL.traverseBottomUp(AstMethDeclL.java:53)
	at rs.ac.bg.etf.pp1.ast.AstProgram.traverseBottomUp(AstProgram.java:67)
	at rs.ac.bg.etf.pp1.MJCompiler.compile(MJCompiler.java:69)
	at rs.ac.bg.etf.pp1.MicroJava.compile(MicroJava.java:12)
	at rs.ac.bg.etf.pp1.MicroJava.main(MicroJava.java:53)
